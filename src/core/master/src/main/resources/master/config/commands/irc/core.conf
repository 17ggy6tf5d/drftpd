# $Id$
addip {
plugin org.drftpd.master.commands.usermanagement
class UserManagementHandler
method doSITE_ADDIP
perms =gadmin =siteop
help Add a new mask to a user
help.specific ${command} <username> <ident@ip>
input all
output source
}

adduser {
plugin org.drftpd.master.commands.usermanagement
class UserManagementHandler
method doSITE_ADDUSER
perms =gadmin =siteop
help Add a new user
help.specific ${command} <user> <password> [<ident@ip#1> ...]
input all
output source
}

addgroup {
plugin org.drftpd.master.commands.usermanagement
class GroupManagementHandler
method doSITE_ADDGROUP
perms =siteop
help Add a new group
help.specific ${command} <group>
input all
output source
}

changeuser {
plugin org.drftpd.master.commands.usermanagement
class UserManagementHandler
method doSITE_CHANGEUSER
perms =gadmin =siteop
help Change parameters for a user
help.specific ${command} <username> <field> <value>
help.specific Valid fields: group, created, ratio, idle_time, credits, tagline
help.specific num_logins # [opt perIP], comment, wkly_allotment, max_sim #dn #up
input all
output source
}

changegroup {
plugin org.drftpd.master.commands.usermanagement
class GroupManagementHandler
method doSITE_CHANGEGROUP
perms =siteop
help Change parameters for a group
help.specific ${command} <groupname> <field> <value>
help.specific Valid fields: created, slots, leechslots
input all
output source
}

changegroupadmin {
plugin org.drftpd.master.commands.usermanagement
class GroupManagementHandler
method doSITE_CHANGEGROUPADMIN
perms =siteop
help Add/Remove users as group admin from a group
help.specific ${command} <group> <user> [<user> ...]
input all
output source
}

chgrp {
plugin org.drftpd.master.commands.usermanagement
class GroupManagementHandler
method doSITE_CHGRP
perms =siteop
help Change secondary groups for a user
help.specific ${command} <user> <group> [<group> ...]
input all
output source
}

chpass {
plugin org.drftpd.master.commands.usermanagement
class UserManagementHandler
method doSITE_CHPASS
perms =gadmin =siteop
help Change password for a user
help.specific ${command} <user> <password>
input all
output source
}

delip {
plugin org.drftpd.master.commands.usermanagement
class UserManagementHandler
method doSITE_DELIP
perms =gadmin =siteop
help Remove a mask from a user
help.specific ${command} <user> <ident@ip> ...
input all
output source
}

deluser {
plugin org.drftpd.master.commands.usermanagement
class UserManagementHandler
method doSITE_DELUSER
perms =gadmin =siteop
help Delete a user
help.specific ${command} <user> [reason]
input all
output source
}

delgroup {
plugin org.drftpd.master.commands.usermanagement
class GroupManagementHandler
method doSITE_DELGROUP
perms =gadmin =siteop
help Delete a group
help.specific ${command} <group>
input all
output source
}

gadduser {
plugin org.drftpd.master.commands.usermanagement
class UserManagementHandler
method doSITE_GADDUSER
perms =siteop
help Add a new user to the specified group
help.specific ${command} <group> <user> <password> [<ident@ip#1 ..]
input all
output source
}

ginfo {
plugin org.drftpd.master.commands.usermanagement
class GroupManagementHandler
method doSITE_GINFO
perms =gadmin =siteop
help Show information on a group
help.specific ${command} <group>
input all
output source
}

give {
plugin org.drftpd.master.commands.usermanagement
class UserManagementHandler
method doSITE_GIVE
perms =siteop
help Give a user credits
help.specific ${command} <user> <bytes>
input all
output source
}

groups {
plugin org.drftpd.master.commands.usermanagement
class GroupManagementHandler
method doSITE_GROUPS
perms =siteop
help Lists the groups on the site
input all
output source
}

grpren {
plugin org.drftpd.master.commands.usermanagement
class GroupManagementHandler
method doSITE_GRPREN
perms =siteop
help Rename a group
help.specific ${command} <oldgroup> <newgroup>
input all
output source
}

kick {
plugin org.drftpd.master.commands.usermanagement
class UserManagementHandler
method doSITE_KICK
perms =siteop
help Kick a users current connections to the site
help.specific ${command} <user> [message]
input all
output source
}

kickall {
plugin org.drftpd.master.commands.usermanagement
class UserManagementHandler
method doSITE_KICKALL
perms =siteop
help Kick all users current connections to the site
help.specific ${command} [message]
input all
output source
}

purge {
plugin org.drftpd.master.commands.usermanagement
class UserManagementHandler
method doSITE_PURGE
perms =gadmin =siteop
help Permanently remove a user from the site
help.specific ${command} <username>
input all
output source
}

delpurge {
plugin org.drftpd.master.commands.usermanagement
class UserManagementHandler
method doSITE_DELPURGE
perms =gadmin =siteop
help Permanently remove a user from the site
help.specific ${command} <username>
input all
output source
}

readd {
plugin org.drftpd.master.commands.usermanagement
class UserManagementHandler
method doSITE_READD
perms =gadmin =siteop
help Readd a deleted user
help.specific ${command} <user>
input all
output source
}

renuser {
plugin org.drftpd.master.commands.usermanagement
class UserManagementHandler
method doSITE_RENUSER
perms =siteop
help Rename a user
help.specific ${command} <old_username> <new_username>
input all
output source
}

seen {
plugin org.drftpd.master.commands.usermanagement
class UserManagementHandler
method doSITE_SEEN
perms *
help Show when a user last connected
help.specific ${command} <user>
input all
output source
}

tagline {
plugin org.drftpd.master.commands.usermanagement
class UserManagementHandler
method doSITE_TAGLINE
perms *
help Change your tagline
help.specific ${command} <tagline>
input all
output source
}

swap {
plugin org.drftpd.master.commands.usermanagement
class UserManagementHandler
method doSITE_SWAP
perms =siteop
help Swap Credits Between Users
help.specific ${command} <srcuser> <destuser> <bytes>
input all
output source
}

take {
plugin org.drftpd.master.commands.usermanagement
class UserManagementHandler
method doSITE_TAKE
perms =siteop
help Remove credits from a user
help.specific ${command} <user> <bytes>
input all
output source
}

user {
plugin org.drftpd.master.commands.usermanagement
class UserManagementHandler
method doSITE_USER
perms *
help Show details for a user
help.specific ${command} <user>
input all
output source
}

users {
plugin org.drftpd.master.commands.usermanagement
class UserManagementHandler
method doSITE_USERS
perms =siteop
help List all usernames added to the site
input all
output source
}

ban {
plugin org.drftpd.master.commands.usermanagement
class UserManagementHandler
method doSITE_BAN
perms =ban =siteop
help Ban a user from logging onto the site for a specified amount of time.
help.specific ${command} <user> <minutes> [reason]
input all
output source
}

banall {
plugin org.drftpd.master.commands.usermanagement
class UserManagementHandler
method doSITE_BANALL
perms =ban =siteop
help Ban all users from logging onto the site for a specified amount of time.
help.specific ${command} <minutes> [reason]
input all
output source
}

unban {
plugin org.drftpd.master.commands.usermanagement
class UserManagementHandler
method doSITE_UNBAN
perms =ban =siteop
help Removes a ban for the specified user.
help.specific ${command} <user>
input all
output source
}

unbanall {
plugin org.drftpd.master.commands.usermanagement
class UserManagementHandler
method doSITE_UNBANALL
perms =ban =siteop
help Removes ban from all users.
help.specific ${command}
input all
output source
}

bans {
plugin org.drftpd.master.commands.usermanagement
class UserManagementHandler
method doSITE_BANS
perms =ban =siteop
help List the current users banned on the site.
input all
output source
}

# $Id$
rebuildindex {
plugin org.drftpd.master.commands.indexmanager
class IndexManager
method doRebuildIndex
perms =siteop
input all
output source
}

indexstatus {
plugin org.drftpd.master.commands.indexmanager
class IndexManager
method doIndexStatus
perms =siteop
input all
output source
}

setexpire {
plugin org.drftpd.master.commands.usermanagement.expireduser
class ExpiredUser
method doSITE_SETEXPIRE
perms =siteop
help Sets expiry date for User <yyyy-MM-dd>
help.specific ${command} <username> <expiry-date>
input all
output source
}

removeexpire {
plugin org.drftpd.master.commands.usermanagement.expireduser
class ExpiredUser
method doSITE_REMOVEEXPIRE
perms =siteop
help Removes expiry date for User
help.specific ${command} <username>
input all
output source
}

addnote {
plugin org.drftpd.master.commands.usermanagement.notes
class Notes
method doSITE_ADDNOTE
perms =siteop
help Add's Note For User
help.specific ${command} <username> <note>
input all
output source
}

delnote {
plugin org.drftpd.master.commands.usermanagement.notes
class Notes
method doSITE_DELNOTE
perms =siteop
help Removes Note For User
help.specific ${command} <username> <noteID>
input all
output source
}

who {
plugin org.drftpd.master.commands.usermanagement
class UserManagementHandler
method doSITE_WHO
perms =siteop
help Show who's online
input all
output source
}

leechers {
plugin org.drftpd.master.commands.usermanagement
class UserManagementHandler
method doLeechers
perms *
help Show who's downloading
input all
output source
}

idlers {
plugin org.drftpd.master.commands.usermanagement
class UserManagementHandler
method doIdlers
perms *
help Show who's idling
input all
output source
}

uploaders {
plugin org.drftpd.master.commands.usermanagement
class UserManagementHandler
method doUploaders
perms *
help Show who's uploading
input all
output source
}

slave {
plugin org.drftpd.master.commands.slavemanagement
class SlaveManagement
method doSlave
perms =siteop
help Display a slaves status
help.specific ${command} <slavename> <more>
input all
output source
}

slaves {
plugin org.drftpd.master.commands.slavemanagement
class SlaveManagement
method doSITE_SLAVES
perms =siteop
help List the status of all slaves
input all
output source
}

bw {
plugin org.drftpd.master.commands.usermanagement
class UserManagementHandler
method doBW
perms %
help Show total bandwidth use
input all
output source
}

speed {
plugin org.drftpd.master.commands.usermanagement
class UserManagementHandler
method doSpeed
perms %
help Show the state of the specified users connections
input all
output source
}

df {
plugin org.drftpd.master.commands.slavemanagement
class SlaveManagement
method doDiskfree
perms *
help Displays current free space
input all
output source
}

bnc {
plugin org.drftpd.master.commands.textoutput
class Textoutput
method doTEXT_OUTPUT
perms *
help Displays the site bnc details
file bnc.txt
input public
output source
}

affils {
plugin org.drftpd.master.commands.textoutput
class Textoutput
method doTEXT_OUTPUT
perms *
help Displays the site affils
file affils.txt
input public
output source
}

alup {
plugin org.drftpd.master.commands.transferstatistics
class TransferStatistics
method doSITE_ALUP
perms *
help Lists the top uploaders of all time
input all
output source
}

aldn {
plugin org.drftpd.master.commands.transferstatistics
class TransferStatistics
method doSITE_ALDN
perms *
help Lists the top downloaders of all time
input all
output source
}

monthup {
plugin org.drftpd.master.commands.transferstatistics
class TransferStatistics
method doSITE_MONTHUP
perms *
help Lists the top uploaders this month
input all
output source
}

monthdn {
plugin org.drftpd.master.commands.transferstatistics
class TransferStatistics
method doSITE_MONTHDN
perms *
help Lists the top downloaders this month
input all
output source
}

wkup {
plugin org.drftpd.master.commands.transferstatistics
class TransferStatistics
method doSITE_WKUP
perms *
help Lists the top uploaders this week
input all
output source
}

wkdn {
plugin org.drftpd.master.commands.transferstatistics
class TransferStatistics
method doSITE_WKDN
perms *
help Lists the top downloaders this week
input all
output source
}

dayup {
plugin org.drftpd.master.commands.transferstatistics
class TransferStatistics
method doSITE_DAYUP
perms *
help Lists the top uploaders today
input all
output source
}

daydn {
plugin org.drftpd.master.commands.transferstatistics
class TransferStatistics
method doSITE_DAYDN
perms *
help Lists the top downloaders today
input all
output source
}

credits {
plugin org.drftpd.master.commands.usermanagement
class UserManagementHandler
method doCredits
perms *
help Show available credits
input all
output source
}

new {
plugin org.drftpd.master.commands.newhandler
class New
method doNEW
perms *
help Will list newly uploaded directories.
help.specific ${command} - List the newest dirs in all sections.
help.specific ${command} <number> - List the <number> newest dirs in all sections.
help.specific ${command} <section> - List the newest dirs in <section>.
help.specific ${command} <section> <number> - List the <number> newest dirs in <section>.
# specify the default number of dirs to show
default 5
# specify the maximum number of dirs to show (overrides user input)
max 10
# specify the sections to exclude from output (space separated)
filtered_sections REQUESTS
input all
output source
}

master-uptime {
plugin org.drftpd.master.commands.serverstatus
class ServerStatus
method doMasterUptime
perms =siteop
help Will show current master uptime
input all
output source
}

slave-uptime {
plugin org.drftpd.master.commands.serverstatus
class ServerStatus
method doSlaveUptime
perms =siteop
help Will show current slave uptime
help.specific ${command} <slave>
input all
output source
}

slaves-uptime {
plugin org.drftpd.master.commands.serverstatus
class ServerStatus
method doSlavesUptime
perms =siteop
help Will show current slaves uptime
input all
output source
}

status {
plugin org.drftpd.master.commands.serverstatus
class ServerStatus
method doStatus
perms =siteop
help Will show current status of the daemon
help.specific ${command} Usage:
help.specific ${command} <os,vm,memory,threads,gc,all>
help.specific ${command} OS - Will show Operational System Info
help.specific ${command} VM - Will show VM Info.
help.specific ${command} MEMORY - Will show Memory Info.
help.specific ${command} THREADS - Will show Threads Info.
help.specific ${command} GC - Will show Garbage Collector Info.
help.specific ${command} CLASSES - Will show Classes Info.
help.specific ${command} ALL - shortcut to display ALL Info.
input all
output source
}

reload {
plugin org.drftpd.master.commands.sitemanagement
class SiteManagementHandler
method doSITE_RELOAD
perms =siteop
help Reload the config files
help.specific ${command}
help.specific Reload the config files
input all
output source
}

shutdown {
plugin org.drftpd.master.commands.sitemanagement
class SiteManagementHandler
method doSITE_SHUTDOWN
perms =siteop
help Shutdown the ftp server
help.specific ${command}
help.specific Shutdown the ftp server
input all
output source
}

help {
plugin org.drftpd.master.commands.misc
class Misc
method doSITE_HELP
perms *
help duh! it does this dummy!
help.specific ${command} <command> will display specific information on that command
input all
output source
}

time {
plugin org.drftpd.master.commands.misc
class Misc
method doSITE_TIME
perms *
help Show current server time
help.specific ${command}
help.specific Show current server time
input all
output source
}

version {
plugin org.drftpd.master.commands.misc
class Misc
method doSITE_VERS
perms *
help Show drftpd version
help.specific ${command}
help.specific Show drftpd version
input all
output source
}

abort {
plugin org.drftpd.master.commands.misc
class Misc
method doABOR
perms *
help Abort all commands being run by the user issuing the abort
input all
output source
}

remergequeue {
plugin org.drftpd.master.commands.slavemanagement
class SlaveManagement
method doRemergequeue
perms =siteop
help displays remergeque status
input public
output source
}

approve {
plugin org.drftpd.master.commands.approve
class ApproveCommands
method doSITE_APPROVE
perms =siteop
help Approve release even though rules say it should get nuked
help.specific ${command} [path]
input all
output source
}

remapprove {
plugin org.drftpd.master.commands.approve
class ApproveCommands
method doSITE_REMAPPROVE
perms =siteop
help Removes Approval of release
help.specific ${command} [path]
input all
output source
}

nuke {
plugin org.drftpd.master.commands.nuke
class Nuke
method doSITE_NUKE
perms =nuke =siteop
search true
help Nuke a directory.
help.specific ${command} <directory> <multiplier> <message>
input all
output source
}

unnuke {
plugin org.drftpd.master.commands.nuke
class Nuke
method doSITE_UNNUKE
perms =nuke =siteop
search true
help Unnuke a directory.
help.specific ${command} <directory>
input all
output source
}

nukes {
plugin org.drftpd.master.commands.nuke
class Nuke
method doSITE_NUKES
perms *
help List all nuked directories.
help.specific ${command} [section]
input all
output source
}

nukesclean {
plugin org.drftpd.master.commands.nuke
class Nuke
method doSITE_NUKESCLEAN
perms =nuke =siteop
help Clear nukelog of all invalid nukes.
help.specific ${command}
input all
output source
}

request {
plugin org.drftpd.request.master
class Request
method doSITE_REQUEST
perms *
help Add a request
help.specific ${command} <nameofrequest>
input all
output source
}

requests {
plugin org.drftpd.request.master
class Request
method doSITE_REQUESTS
perms *
help List current requests
input all
output source
}

reqfilled {
plugin org.drftpd.request.master
class Request
method doSITE_REQFILLED
perms *
help Fill a request
help.specific ${command} <nameofrequest>
input all
output source
}

reqdel {
plugin org.drftpd.request.master
class Request
method doSITE_REQDELETE
perms =request
help Deletes a request
help.specific ${command} <nameofrequest>
input all
output source

# you can only delete your own without deleteOthers
request.deleteOthers =siteop
}

top {
plugin org.drftpd.trial.master
class TrialManagerCommands
method doTOP
perms *
help Lists All Users In Trial Period
help.specific ${command} <num>
input all
output source
}

cut {
plugin org.drftpd.trial.master
class TrialManagerCommands
method doCUT
perms *
help Lists All Cut Users In Trial Period
help.specific ${command} <num>
input all
output source
}

passed {
plugin org.drftpd.trial.master
class TrialManagerCommands
method doPASSED
perms *
help Lists If User Has Passed Trial
help.specific ${command} <User>
input all
output source
}

gpassed {
plugin org.drftpd.trial.master
class TrialManagerCommands
method doPASSED
perms %
help Lists If Group Has Passed Trial
help.specific ${command} <Group>
input public
output source
}

gtop {
plugin org.drftpd.trial.master
class TrialManagerCommands
method doTOP
perms *
help Lists All Users In Trial Period
help.specific ${command} <num>
input all
output source
}
