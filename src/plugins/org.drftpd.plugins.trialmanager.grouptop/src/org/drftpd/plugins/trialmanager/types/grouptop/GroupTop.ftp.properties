## Define the announces
place.passed=[ ${rank} ]${color}7 ${grpname} uppded ${upBytesPU}/User -> passed groupquota ( ${size} user upped ${upBytes})
place.failed=[ ${rank} ]${color}7 ${grpname} uppded ${upBytesPU}/User -> failed groupquota ( ${size} user upped ${upBytes} [min. ${min}])
place.notfound==Group:${color}7 ${grpname} Not Found
place.winning=[ ${rank} ]${color}7 ${grpname} uppded ${upBytesPU}/User -> passed groupquota ( ${size} user upped ${upBytes})
place.losing=[ ${rank} ]${color}7 ${grpname} uppded ${upBytesPU}/User -> failed groupquota ( ${size} user upped ${upBytes} [min. ${min}])

## Define the announce for !top command
top.header=[ ${bold}${name}${bold} - ${groups} Groups, Top ${keep} Will Stay - (${time} Remaining) ]
top.header.min=[ ${bold}${name}${bold} - ${grps} Groups, Top ${keep} Will Stay - (${time} Remaining) (Min ${min}) and ${percent}% of #1 monthup) ]
cut.header=[ ${bold}${name}${bold} - ${groups} Groups, These Groups Will NOT Make It - (${time} Remaining) ]
cut.header.min=[ ${bold}${name}${bold} - ${groups} Groups, These Groups Will NOT Make It - (${time} Remaining) (Min ${min}) and ${percent}% of #1 monthup) ]
top.passed=[ ${rank} ]${color}7 ${grpname} upped ${avgbytes}/User => passed (${grpsize} users upped ${grpbytes})
top.failed=[ ${rank} ]${color}7 ${grpname} upped ${avgbytes}/User => failed (${grpsize} users upped ${grpbytes} [min. ${min}])
cut.failed=[ ${rank} ] ${usernick}/${usergroup} ( ${upbytes} Up ) is currently FAILING.
cut.empty=Nobody Will Be Cut From Here This List

## Defined the announce for specific group passed
passed.failed=|+| ${rank}.${color}7 ${usernick} upped ${up}
passed.failed.header=[ ${rank} ] ${grpname} uppded ${upBytesPU}/User -> failed groupquota (${size} user upped ${upBytes} [min. ${min}])
passed.nosuchgroup=Group: ${name} Not Found
passed.passed=|+| ${rank}.${color}7 ${usernick} upped ${up}
passed.passed.header=[ ${rank} ]${color}7 ${grpname} uppded ${upBytesPU}/User -> passed groupquota (${size} user upped ${upBytes})